{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gowrisubha K\\\\Downloads\\\\caster-admin\\\\client\\\\src\\\\components\\\\BasestationMap\\\\Mapview.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport * as tt from \"@tomtom-international/web-sdk-maps\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WS_URL = \"ws://127.0.0.1:8080\";\nconst MAX_ZOOM = 15;\n\n// ... other imports\n\nconst MapView = () => {\n  _s();\n  const {\n    basemountpoint,\n    subid\n  } = useParams();\n  const mapElement = useRef();\n  const [map, setMap] = useState({});\n  const [GPST, setGPST] = useState(null);\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [height, setHeight] = useState(null);\n  const [Q, setQ] = useState(null);\n  const [ns, setNs] = useState(null);\n  const [sdn, setSdn] = useState(null);\n  const [sde, setSde] = useState(null);\n  const [sdu, setSdu] = useState(null);\n  const [sdne, setSdne] = useState(null);\n  const [sdeu, setSdeu] = useState(null);\n  const [sdun, setSdun] = useState(null);\n  const [age, setAge] = useState(null);\n  const [ratio, setRatio] = useState(null);\n  const [timestamp, setTimestamp] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState(\"Disconnected\");\n  const [receivedData, setReceivedData] = useState([]); // State to hold received data\n  const [newGreenMarkerCoordinates, setNewGreenMarkerCoordinates] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  const [newYellowMarkerCoordinates, setNewYellowMarkerCoordinates] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  // Add this line at the beginning of your component\n  const [nearbyLocations, setNearbyLocations] = useState([]);\n  const [userLocation, setUserLocation] = useState({\n    latitude: 37.423566272,\n    longitude: -122.094105874\n  });\n  const mapView = useRef(null); // Add this line to create a ref\n\n  const {\n    sendJsonMessage,\n    lastJsonMessage,\n    readyState\n  } = useWebSocket(WS_URL, {\n    share: false,\n    shouldReconnect: () => true\n  });\n  useEffect(() => {\n    // Fetch the data from your MongoDB database\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api/currents\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data\");\n        }\n        const data = await response.json();\n        if (data.length > 0) {\n          // Extract latitude and longitude from the first data point\n          const {\n            latitude,\n            longitude\n          } = data[0].users[0]; // Adjust the path based on your data structure\n\n          // Update the userLocation state\n          setUserLocation({\n            latitude,\n            longitude\n          });\n          updateMap(); // Update the map with the new user location\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error.message);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array to run only once when the component mounts\n\n  // ... other code\n\n  useEffect(() => {\n    if (lastJsonMessage) {\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\n      const {\n        latitude,\n        longitude\n      } = lastJsonMessage.data;\n      setLat(latitude);\n      setLng(longitude);\n      updateMap();\n    }\n  }, [lastJsonMessage]);\n  useEffect(() => {\n    const defaultLatitude = 37.423566272;\n    const defaultLongitude = 37.423566272;\n    let map = tt.map({\n      key: \"lA2ONWjNjuFjGxJC4oAlV2IQJrgTpAXi\",\n      container: mapElement.current,\n      center: [defaultLatitude, defaultLongitude],\n      // Default center, will be updated later\n      zoom: 10,\n      language: \"en-GB\"\n    });\n    map.addControl(new tt.FullscreenControl());\n    map.addControl(new tt.NavigationControl());\n    setMap(map);\n    return () => map.remove();\n  }, []);\n  useEffect(() => {\n    const connectionStatusMessages = {\n      [ReadyState.CONNECTING]: \"Connecting to Caster...\",\n      [ReadyState.OPEN]: \"OPEN\",\n      [ReadyState.CLOSING]: \"Disconnecting...\",\n      [ReadyState.CLOSED]: \"Disconnected\"\n    };\n    setConnectionStatus(connectionStatusMessages[readyState]);\n  }, [readyState]);\n  useEffect(() => {\n    if (lastJsonMessage) {\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\n      const {\n        GPST,\n        latitude,\n        longitude,\n        height,\n        Q,\n        ns,\n        sdn,\n        sde,\n        sdu,\n        sdne,\n        sdeu,\n        sdun,\n        age,\n        ratio,\n        timestamp\n      } = lastJsonMessage.data;\n\n      // Store received data into an array of objects\n      const newData = [...receivedData, {\n        latitude,\n        longitude,\n        height,\n        q: Q,\n        ns,\n        sdn,\n        sde,\n        sdu,\n        sdne,\n        sdeu,\n        sdun,\n        age,\n        ratio,\n        timestamp,\n        mountpoint: GPST\n      }];\n      console.log(newData);\n      setReceivedData(newData);\n      setGPST(GPST);\n      setLat(latitude);\n      setLng(longitude);\n      setHeight(height);\n      setQ(Q);\n      setNs(ns);\n      setSdn(sdn);\n      setSde(sde);\n      setSdu(sdu);\n      setSdne(sdne);\n      setSdeu(sdeu);\n      setSdun(sdun);\n      setAge(age);\n      setRatio(ratio);\n      setTimestamp(timestamp);\n      updateMap();\n    }\n  }, [lastJsonMessage]);\n  const handleConnect = () => {\n    sendJsonMessage({\n      action: \"connectToCaster\"\n    });\n    setConnectionStatus(\"Connected to Caster\");\n  };\n  const handleStopStreaming = () => {\n    sendJsonMessage({\n      action: \"stopStreaming\"\n    });\n    setConnectionStatus(\"Streaming of data stopped...\");\n  };\n  const handleClose = async () => {\n    console.log(\"receivedData\");\n    sendJsonMessage({\n      action: \"closeConnection\"\n    });\n    setConnectionStatus(\"Disconnected\");\n    try {\n      // Get the user details, including subscriptions\n      const responseUserDetails = await fetch('/api/users/all-details', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // Add any headers needed for authentication if required\n        }\n      });\n      if (!responseUserDetails.ok) {\n        throw new Error('Failed to fetch user details');\n      }\n      const userData = await responseUserDetails.json();\n\n      // Find the specific subscription you want to update (you might need to adjust this logic)\n      const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\n      if (subscription) {\n        // Make a PUT request to update the baseStationData for the subscription\n        const responseUpdateData = await fetch(`/api/users/update-base-station-data/${userData._id}/${subscription._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n            // Add any headers needed for authentication if required\n          },\n          body: JSON.stringify({\n            receivedData\n          })\n        });\n        if (!responseUpdateData.ok) {\n          throw new Error('Failed to update base station data');\n        }\n        const responseData = await responseUpdateData.json();\n        console.log(responseData.message);\n      }\n    } catch (error) {\n      console.error('Error handling close:', error.message);\n    }\n  };\n\n  // ...\n\n  useEffect(() => {\n    fetch(\"/Nearbybasestation.json\").then(response => response.json()).then(data => {\n      setNearbyLocations(data);\n      addBaseStationMarkers(data);\n      updateMap();\n    }).catch(error => console.error(\"Error fetching JSON data:\", error));\n  }, []);\n\n  // Function to draw lines from user location to nearby base stations\n\n  // const addLocationMarkerOnMap = (location) => {\n  //   if (map && location.latitude && location.longitude) {\n  //     const coordinates = [\n  //       parseFloat(location.longitude),\n  //       parseFloat(location.latitude),\n  //     ];\n\n  //     new tt.Marker({\n  //       color: '#0000FF', // Blue color for locations\n  //     })\n  //       .setLngLat(coordinates)\n  //       .addTo(map)\n  //       .setPopup(new tt.Popup().setHTML(`Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\n  //   }\n  // };\n\n  const addBaseStationMarkers = locations => {\n    if (map && newGreenMarkerCoordinates.latitude && newGreenMarkerCoordinates.longitude) {\n      const newGreenMarkerCoordinatesArray = [parseFloat(newGreenMarkerCoordinates.longitude), parseFloat(newGreenMarkerCoordinates.latitude)];\n      new tt.Marker({\n        color: '#00FF00' // Green color for the new marker\n      }).setLngLat(newGreenMarkerCoordinatesArray).addTo(map).setPopup(new tt.Popup().setHTML(`Latitude: ${newGreenMarkerCoordinates.latitude}<br>Longitude: ${newGreenMarkerCoordinates.longitude}`));\n    }\n\n    // Add markers for all locations\n    locations.forEach((location, index) => {\n      if (map && location.latitude && location.longitude) {\n        const coordinates = [parseFloat(location.longitude), parseFloat(location.latitude)];\n        new tt.Marker({\n          color: '#0000FF' // Blue color for locations\n        }).setLngLat(coordinates).addTo(map).setPopup(new tt.Popup().setHTML(`Base Station ${index + 1}<br>Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\n      }\n    });\n  };\n  useEffect(() => {\n    addBaseStationMarkers(nearbyLocations); // Use the nearbyLocations state\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\n  const addUserMarkers = locations => {\n    if (map && userLocation.latitude && userLocation.longitude) {\n      const newYellowMarkerCoordinatesArray = [parseFloat(userLocation.longitude), parseFloat(userLocation.latitude)];\n      new tt.Marker({\n        color: '#FFFF00' // Green color for the new marker\n      }).setLngLat(newYellowMarkerCoordinatesArray).addTo(map).setPopup(new tt.Popup().setHTML(`User Location <br>Latitude: ${userLocation.latitude}<br>Longitude: ${userLocation.longitude}`));\n    }\n  };\n  useEffect(() => {\n    addUserMarkers(nearbyLocations); // Use the nearbyLocations state\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\n  const handleSendRequest = async () => {\n    try {\n      const response = await fetch('/api/users/all-details', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // Add any headers needed for authentication if required\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch user details');\n      }\n      const userData = await response.json();\n      if (userData.subscriptions.length > 0) {\n        const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\n        if (subscription) {\n          const SubscriptionDelay = subscription.delay;\n          const Subscriptionusername = subscription.username;\n          const Subscriptionpwd = subscription.passsword;\n          const data = {\n            action: \"sendRequest\",\n            username: Subscriptionusername,\n            password: Subscriptionpwd,\n            mountPoint: basemountpoint,\n            delay: SubscriptionDelay\n          };\n          console.log(\"exiting handlesenreq\");\n          sendJsonMessage(data);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching user details:', error.message);\n    }\n  };\n  const updateMap = () => {\n    if (map && userLocation.latitude && userLocation.longitude) {\n      map.setCenter([parseFloat(userLocation.longitude), parseFloat(userLocation.latitude)]);\n      map.setZoom(MAX_ZOOM);\n      addMarker();\n    }\n  };\n  const addMarker = () => {\n    if (map && lat && lng) {\n      const targetCoordinates = [parseFloat(lng), parseFloat(lat)];\n      const existingMarker = map.getLayer('roverMarker');\n      if (existingMarker) {\n        existingMarker.setLngLat(targetCoordinates);\n      } else {\n        const marker = new tt.Marker({\n          color: '#FF0000'\n        }).setLngLat(targetCoordinates).addTo(map).setPopup(new tt.Popup().setHTML(\"Real Time Rover Location\"));\n        marker._element.id = 'roverMarker';\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mapviewcontainer\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: mapElement,\n              className: \"mapDiv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(MapView, \"vz1Skyz07DbU3NTc0dp/lx3XYuk=\", false, function () {\n  return [useParams, useWebSocket];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","useWebSocket","ReadyState","tt","Container","Col","Row","jsxDEV","_jsxDEV","Fragment","_Fragment","WS_URL","MAX_ZOOM","MapView","_s","basemountpoint","subid","mapElement","map","setMap","GPST","setGPST","lat","setLat","lng","setLng","height","setHeight","Q","setQ","ns","setNs","sdn","setSdn","sde","setSde","sdu","setSdu","sdne","setSdne","sdeu","setSdeu","sdun","setSdun","age","setAge","ratio","setRatio","timestamp","setTimestamp","connectionStatus","setConnectionStatus","receivedData","setReceivedData","newGreenMarkerCoordinates","setNewGreenMarkerCoordinates","latitude","longitude","newYellowMarkerCoordinates","setNewYellowMarkerCoordinates","nearbyLocations","setNearbyLocations","userLocation","setUserLocation","mapView","sendJsonMessage","lastJsonMessage","readyState","share","shouldReconnect","fetchData","response","fetch","ok","Error","data","json","length","users","updateMap","error","console","message","log","JSON","stringify","defaultLatitude","defaultLongitude","key","container","current","center","zoom","language","addControl","FullscreenControl","NavigationControl","remove","connectionStatusMessages","CONNECTING","OPEN","CLOSING","CLOSED","newData","q","mountpoint","handleConnect","action","handleStopStreaming","handleClose","responseUserDetails","method","headers","userData","subscription","subscriptions","find","sub","responseUpdateData","_id","body","responseData","then","addBaseStationMarkers","catch","locations","newGreenMarkerCoordinatesArray","parseFloat","Marker","color","setLngLat","addTo","setPopup","Popup","setHTML","forEach","location","index","coordinates","addUserMarkers","newYellowMarkerCoordinatesArray","handleSendRequest","SubscriptionDelay","delay","Subscriptionusername","username","Subscriptionpwd","passsword","password","mountPoint","setCenter","setZoom","addMarker","targetCoordinates","existingMarker","getLayer","marker","_element","id","children","className","xs","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gowrisubha K/Downloads/caster-admin/client/src/components/BasestationMap/Mapview.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport * as tt from \"@tomtom-international/web-sdk-maps\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\r\nimport \"./Map.css\";\r\n\r\nconst WS_URL = \"ws://127.0.0.1:8080\";\r\nconst MAX_ZOOM = 15;\r\n\r\n\r\n\r\n// ... other imports\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\nconst MapView = () => {\r\n    const { basemountpoint, subid } = useParams();\r\n    const mapElement = useRef();\r\n    const [map, setMap] = useState({});\r\n    const [GPST, setGPST] = useState(null);\r\n    const [lat, setLat] = useState(null);\r\n    const [lng, setLng] = useState(null);\r\n    const [height, setHeight] = useState(null);\r\n    const [Q,setQ]=useState(null);\r\n    const [ns,setNs]=useState(null);\r\n    const [sdn,setSdn]=useState(null);\r\n    const [sde,setSde]=useState(null);\r\n    const [sdu,setSdu]=useState(null);\r\n    const [sdne,setSdne]=useState(null);\r\n    const [sdeu,setSdeu]=useState(null);\r\n    const [sdun,setSdun]=useState(null);\r\n    const [age,setAge]=useState(null);\r\n    const [ratio,setRatio]=useState(null);\r\n    const[timestamp,setTimestamp]=useState(null);\r\n    const [connectionStatus, setConnectionStatus] = useState(\"Disconnected\");\r\n    const [receivedData, setReceivedData] = useState([]); // State to hold received data\r\n    const [newGreenMarkerCoordinates, setNewGreenMarkerCoordinates] = useState({ latitude: 0, longitude: 0 });\r\n    const [newYellowMarkerCoordinates, setNewYellowMarkerCoordinates] = useState({ latitude: 0, longitude: 0 });\r\n  // Add this line at the beginning of your component\r\n  const [nearbyLocations, setNearbyLocations] = useState([]);\r\n  const [userLocation, setUserLocation] = useState({ latitude: 37.423566272, longitude: -122.094105874 });\r\n\r\n\r\n    const mapView = useRef(null); // Add this line to create a ref\r\n  \r\n    \r\n    const { sendJsonMessage, lastJsonMessage, readyState } = useWebSocket(\r\n      WS_URL,\r\n      {\r\n        share: false,\r\n        shouldReconnect: () => true,\r\n      }\r\n    );\r\n  \r\n    useEffect(() => {\r\n      // Fetch the data from your MongoDB database\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch(\"/api/currents\");\r\n          if (!response.ok) {\r\n            throw new Error(\"Failed to fetch data\");\r\n          }\r\n  \r\n          const data = await response.json();\r\n  \r\n          if (data.length > 0) {\r\n            // Extract latitude and longitude from the first data point\r\n            const { latitude, longitude } = data[0].users[0]; // Adjust the path based on your data structure\r\n  \r\n            // Update the userLocation state\r\n            setUserLocation({ latitude, longitude });\r\n            updateMap(); // Update the map with the new user location\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error.message);\r\n        }\r\n      };\r\n  \r\n      fetchData();\r\n    }, []); // Empty dependency array to run only once when the component mounts\r\n  \r\n    // ... other code\r\n\r\n    useEffect(() => {\r\n      if (lastJsonMessage) {\r\n        console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\r\n        const { latitude, longitude, } = lastJsonMessage.data;\r\n        setLat(latitude);\r\n        setLng(longitude);\r\n        updateMap();\r\n      }\r\n    }, [lastJsonMessage]);\r\n  \r\n    useEffect(() => {\r\n      const defaultLatitude = 37.423566272;\r\n    const defaultLongitude = 37.423566272;\r\n      let map = tt.map({\r\n        key: \"lA2ONWjNjuFjGxJC4oAlV2IQJrgTpAXi\",\r\n        container: mapElement.current,\r\n        center: [defaultLatitude, defaultLongitude], // Default center, will be updated later\r\n        zoom: 10,\r\n        language: \"en-GB\",\r\n      });\r\n  \r\n      map.addControl(new tt.FullscreenControl());\r\n      map.addControl(new tt.NavigationControl());\r\n      setMap(map);\r\n  \r\n      return () => map.remove();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      const connectionStatusMessages = {\r\n        [ReadyState.CONNECTING]: \"Connecting to Caster...\",\r\n        [ReadyState.OPEN]: \"OPEN\",\r\n        [ReadyState.CLOSING]: \"Disconnecting...\",\r\n        [ReadyState.CLOSED]: \"Disconnected\",\r\n      };\r\n  \r\n      setConnectionStatus(connectionStatusMessages[readyState]);\r\n    }, [readyState]);\r\n  \r\n    useEffect(() => {\r\n      if (lastJsonMessage) {\r\n        console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\r\n        const { GPST,latitude, longitude, height,Q,ns,sdn,sde,sdu,sdne,sdeu,sdun,age,ratio,timestamp } = lastJsonMessage.data;\r\n  \r\n        // Store received data into an array of objects\r\n        const newData = [...receivedData, { latitude, longitude, height ,q:Q,ns,sdn,sde,sdu,sdne,sdeu,sdun,age,ratio,timestamp,mountpoint:GPST}];\r\n        console.log(newData);\r\n        \r\n        setReceivedData(newData);\r\n        setGPST(GPST);\r\n        setLat(latitude);\r\n        setLng(longitude);\r\n        setHeight(height);\r\n        setQ(Q);\r\n        setNs(ns);\r\n        setSdn(sdn);\r\n        setSde(sde);\r\n        setSdu(sdu);\r\n        setSdne(sdne);\r\n        setSdeu(sdeu);\r\n        setSdun(sdun);\r\n        setAge(age);\r\n        setRatio(ratio);\r\n        setTimestamp(timestamp);\r\n        updateMap();\r\n      }\r\n    }, [lastJsonMessage]);\r\n  \r\n    const handleConnect = () => {\r\n      sendJsonMessage({ action: \"connectToCaster\" });\r\n      setConnectionStatus(\"Connected to Caster\");\r\n    };\r\n  \r\n    const handleStopStreaming = () => {\r\n      sendJsonMessage({ action: \"stopStreaming\" });\r\n      setConnectionStatus(\"Streaming of data stopped...\");\r\n    };\r\n  \r\n    const handleClose = async () => {\r\n      console.log(\"receivedData\");\r\n      sendJsonMessage({ action: \"closeConnection\" });\r\n      setConnectionStatus(\"Disconnected\");\r\n    \r\n      try {\r\n        // Get the user details, including subscriptions\r\n        const responseUserDetails = await fetch('/api/users/all-details', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            // Add any headers needed for authentication if required\r\n          },\r\n        });\r\n    \r\n        if (!responseUserDetails.ok) {\r\n          throw new Error('Failed to fetch user details');\r\n        }\r\n    \r\n        const userData = await responseUserDetails.json();\r\n    \r\n        // Find the specific subscription you want to update (you might need to adjust this logic)\r\n        const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\r\n    \r\n        if (subscription) {\r\n          // Make a PUT request to update the baseStationData for the subscription\r\n          const responseUpdateData = await fetch(`/api/users/update-base-station-data/${userData._id}/${subscription._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // Add any headers needed for authentication if required\r\n            },\r\n            body: JSON.stringify({ receivedData }),\r\n          });\r\n    \r\n          if (!responseUpdateData.ok) {\r\n            throw new Error('Failed to update base station data');\r\n          }\r\n    \r\n          const responseData = await responseUpdateData.json();\r\n          console.log(responseData.message);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error handling close:', error.message);\r\n      }\r\n    };\r\n    \r\n    // ...\r\n  \r\n    useEffect(() => {\r\n        fetch(\"/Nearbybasestation.json\")\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setNearbyLocations(data);\r\n            addBaseStationMarkers(data);\r\n            updateMap();\r\n          })\r\n          \r\n          .catch(error => console.error(\"Error fetching JSON data:\", error));\r\n          \r\n          \r\n      }, []);\r\n      \r\n\r\n      // Function to draw lines from user location to nearby base stations\r\n     \r\n  // const addLocationMarkerOnMap = (location) => {\r\n  //   if (map && location.latitude && location.longitude) {\r\n  //     const coordinates = [\r\n  //       parseFloat(location.longitude),\r\n  //       parseFloat(location.latitude),\r\n  //     ];\r\n  \r\n  //     new tt.Marker({\r\n  //       color: '#0000FF', // Blue color for locations\r\n  //     })\r\n  //       .setLngLat(coordinates)\r\n  //       .addTo(map)\r\n  //       .setPopup(new tt.Popup().setHTML(`Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\r\n  //   }\r\n  // };\r\n  \r\n \r\n  \r\n  const addBaseStationMarkers = (locations) => {\r\n    if (map && newGreenMarkerCoordinates.latitude && newGreenMarkerCoordinates.longitude) {\r\n      const newGreenMarkerCoordinatesArray = [\r\n        parseFloat(newGreenMarkerCoordinates.longitude),\r\n        parseFloat(newGreenMarkerCoordinates.latitude),\r\n      ];\r\n  \r\n      new tt.Marker({\r\n        color: '#00FF00' // Green color for the new marker\r\n      })\r\n        .setLngLat(newGreenMarkerCoordinatesArray)\r\n        .addTo(map)\r\n        .setPopup(new tt.Popup().setHTML(`Latitude: ${newGreenMarkerCoordinates.latitude}<br>Longitude: ${newGreenMarkerCoordinates.longitude}`));\r\n    }\r\n  \r\n    // Add markers for all locations\r\n    locations.forEach((location, index) => {\r\n      if (map && location.latitude && location.longitude) {\r\n        const coordinates = [\r\n          parseFloat(location.longitude),\r\n          parseFloat(location.latitude),\r\n        ];\r\n  \r\n        new tt.Marker({\r\n          color: '#0000FF', // Blue color for locations\r\n        })\r\n          .setLngLat(coordinates)\r\n          .addTo(map)\r\n          .setPopup(new tt.Popup().setHTML(`Base Station ${index + 1}<br>Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\r\n      }\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    addBaseStationMarkers(nearbyLocations); // Use the nearbyLocations state\r\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\r\n\r\n  \r\n  const addUserMarkers = (locations) => {\r\n    if (map && userLocation.latitude && userLocation.longitude) {\r\n      const newYellowMarkerCoordinatesArray = [\r\n        parseFloat(userLocation.longitude),\r\n        parseFloat(userLocation.latitude),\r\n      ];\r\n  \r\n      new tt.Marker({\r\n        color: '#FFFF00' // Green color for the new marker\r\n      })\r\n        .setLngLat(newYellowMarkerCoordinatesArray)\r\n        .addTo(map)\r\n        .setPopup(new tt.Popup().setHTML(`User Location <br>Latitude: ${userLocation.latitude}<br>Longitude: ${userLocation.longitude}`));\r\n    }\r\n  \r\n    \r\n  };\r\n  \r\n  useEffect(() => {\r\n    addUserMarkers(nearbyLocations); // Use the nearbyLocations state\r\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\r\n\r\n  \r\n    const handleSendRequest = async () => {\r\n      try {\r\n        const response = await fetch('/api/users/all-details', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            // Add any headers needed for authentication if required\r\n          },\r\n        });\r\n    \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user details');\r\n        }\r\n    \r\n        const userData = await response.json();\r\n        if (userData.subscriptions.length > 0) {\r\n          const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\r\n    \r\n          if (subscription) {\r\n            const SubscriptionDelay = subscription.delay;\r\n            const Subscriptionusername = subscription.username;\r\n            const Subscriptionpwd = subscription.passsword;\r\n    \r\n            const data = {\r\n              action: \"sendRequest\",\r\n              username: Subscriptionusername,\r\n              password: Subscriptionpwd,\r\n              mountPoint: basemountpoint,\r\n              delay: SubscriptionDelay\r\n            };\r\n            console.log(\"exiting handlesenreq\");\r\n            sendJsonMessage(data);\r\n    \r\n    \r\n            \r\n          \r\n        }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user details:', error.message);\r\n      }\r\n    };\r\n  \r\n    \r\n    const updateMap = () => {\r\n      if (map && userLocation.latitude && userLocation.longitude) {\r\n        map.setCenter([parseFloat(userLocation.longitude), parseFloat(userLocation.latitude)]);\r\n        map.setZoom(MAX_ZOOM);\r\n        addMarker();\r\n      }\r\n    };\r\n  \r\n    const addMarker = () => {\r\n      if (map && lat && lng) {\r\n        const targetCoordinates = [parseFloat(lng), parseFloat(lat)];\r\n  \r\n        const existingMarker = map.getLayer('roverMarker');\r\n  \r\n        if (existingMarker) {\r\n          existingMarker.setLngLat(targetCoordinates);\r\n        } else {\r\n          const marker = new tt.Marker({\r\n            color: '#FF0000'\r\n          })\r\n            .setLngLat(targetCoordinates)\r\n            .addTo(map)\r\n            .setPopup(new tt.Popup().setHTML(\"Real Time Rover Location\"));\r\n  \r\n          marker._element.id = 'roverMarker';\r\n        }\r\n      }\r\n    };\r\n  \r\n\r\n  return (\r\n    <>\r\n    <center>\r\n    <Container  className=\"mapviewcontainer\">\r\n      <Row>\r\n        <Col xs=\"12\">\r\n          <div ref={mapElement} className=\"mapDiv\" />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    </center>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}