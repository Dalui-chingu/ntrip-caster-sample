{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gowrisubha K\\\\Downloads\\\\caster-admin\\\\client\\\\src\\\\components\\\\BasestationMap\\\\Mapview.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport * as tt from \"@tomtom-international/web-sdk-maps\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WS_URL = \"ws://127.0.0.1:8080\";\nconst MAX_ZOOM = 15;\nconst MapView = () => {\n  _s();\n  const {\n    basemountpoint,\n    subid\n  } = useParams();\n  const mapElement = useRef();\n  const [map, setMap] = useState({});\n  const [GPST, setGPST] = useState(null);\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [height, setHeight] = useState(null);\n  const [Q, setQ] = useState(null);\n  const [ns, setNs] = useState(null);\n  const [sdn, setSdn] = useState(null);\n  const [sde, setSde] = useState(null);\n  const [sdu, setSdu] = useState(null);\n  const [sdne, setSdne] = useState(null);\n  const [sdeu, setSdeu] = useState(null);\n  const [sdun, setSdun] = useState(null);\n  const [age, setAge] = useState(null);\n  const [ratio, setRatio] = useState(null);\n  const [timestamp, setTimestamp] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState(\"Disconnected\");\n  const [receivedData, setReceivedData] = useState([]);\n  const [newGreenMarkerCoordinates, setNewGreenMarkerCoordinates] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  const [newYellowMarkerCoordinates, setNewYellowMarkerCoordinates] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  const lineLayerRef = useRef(null);\n  const [nearbyLocations, setNearbyLocations] = useState([]);\n  const [userLocation, setUserLocation] = useState({\n    latitude: 37.423566272,\n    longitude: -122.094105874\n  });\n  const mapView = useRef(null);\n  const {\n    sendJsonMessage,\n    lastJsonMessage,\n    readyState\n  } = useWebSocket(WS_URL, {\n    share: false,\n    shouldReconnect: () => true\n  });\n  useEffect(() => {\n    if (lastJsonMessage) {\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\n      const {\n        latitude,\n        longitude\n      } = lastJsonMessage.data;\n      setLat(latitude);\n      setLng(longitude);\n      updateMap();\n    }\n  }, [lastJsonMessage]);\n  useEffect(() => {\n    let map = tt.map({\n      key: \"lA2ONWjNjuFjGxJC4oAlV2IQJrgTpAXi\",\n      container: mapElement.current,\n      center: [0, 0],\n      zoom: 10,\n      language: \"en-GB\"\n    });\n    map.addControl(new tt.FullscreenControl());\n    map.addControl(new tt.NavigationControl());\n    setMap(map);\n    map.addSource('lineSource', {\n      type: 'geojson',\n      data: {\n        type: 'Feature',\n        properties: {},\n        geometry: {\n          type: 'LineString',\n          coordinates: []\n        }\n      }\n    });\n    map.addLayer({\n      id: 'lineLayer',\n      type: 'line',\n      source: 'lineSource',\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#0000FF',\n        'line-width': 2\n      }\n    });\n    lineLayerRef.current = map.getLayer('lineLayer');\n    return () => map.remove();\n  }, []);\n  useEffect(() => {\n    const connectionStatusMessages = {\n      [ReadyState.CONNECTING]: \"Connecting to Caster...\",\n      [ReadyState.OPEN]: \"OPEN\",\n      [ReadyState.CLOSING]: \"Disconnecting...\",\n      [ReadyState.CLOSED]: \"Disconnected\"\n    };\n    setConnectionStatus(connectionStatusMessages[readyState]);\n  }, [readyState]);\n  useEffect(() => {\n    if (lastJsonMessage) {\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\n      const {\n        GPST,\n        latitude,\n        longitude,\n        height,\n        Q,\n        ns,\n        sdn,\n        sde,\n        sdu,\n        sdne,\n        sdeu,\n        sdun,\n        age,\n        ratio,\n        timestamp\n      } = lastJsonMessage.data;\n      const newData = [...receivedData, {\n        latitude,\n        longitude,\n        height,\n        q: Q,\n        ns,\n        sdn,\n        sde,\n        sdu,\n        sdne,\n        sdeu,\n        sdun,\n        age,\n        ratio,\n        timestamp,\n        mountpoint: GPST\n      }];\n      console.log(newData);\n      setReceivedData(newData);\n      setGPST(GPST);\n      setLat(latitude);\n      setLng(longitude);\n      setHeight(height);\n      setQ(Q);\n      setNs(ns);\n      setSdn(sdn);\n      setSde(sde);\n      setSdu(sdu);\n      setSdne(sdne);\n      setSdeu(sdeu);\n      setSdun(sdun);\n      setAge(age);\n      setRatio(ratio);\n      setTimestamp(timestamp);\n      updateMap();\n    }\n  }, [lastJsonMessage]);\n  const handleConnect = () => {\n    sendJsonMessage({\n      action: \"connectToCaster\"\n    });\n    setConnectionStatus(\"Connected to Caster\");\n  };\n  const handleStopStreaming = () => {\n    sendJsonMessage({\n      action: \"stopStreaming\"\n    });\n    setConnectionStatus(\"Streaming of data stopped...\");\n  };\n  const handleClose = async () => {\n    console.log(\"receivedData\");\n    sendJsonMessage({\n      action: \"closeConnection\"\n    });\n    setConnectionStatus(\"Disconnected\");\n    try {\n      const responseUserDetails = await fetch('/api/users/all-details', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!responseUserDetails.ok) {\n        throw new Error('Failed to fetch user details');\n      }\n      const userData = await responseUserDetails.json();\n      const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\n      if (subscription) {\n        const responseUpdateData = await fetch(`/api/users/update-base-station-data/${userData._id}/${subscription._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            receivedData\n          })\n        });\n        if (!responseUpdateData.ok) {\n          throw new Error('Failed to update base station data');\n        }\n        const responseData = await responseUpdateData.json();\n        console.log(responseData.message);\n      }\n    } catch (error) {\n      console.error('Error handling close:', error.message);\n    }\n  };\n  useEffect(() => {\n    fetch(\"/Nearbybasestation.json\").then(response => response.json()).then(data => {\n      setNearbyLocations(data);\n      addBaseStationMarkers(data);\n      updateMap();\n    }).catch(error => console.error(\"Error fetching JSON data:\", error));\n  }, []);\n  const addBaseStationMarkers = locations => {\n    if (map && newGreenMarkerCoordinates.latitude && newGreenMarkerCoordinates.longitude) {\n      const newGreenMarkerCoordinatesArray = [parseFloat(newGreenMarkerCoordinates.longitude), parseFloat(newGreenMarkerCoordinates.latitude)];\n      new tt.Marker({\n        color: '#00FF00'\n      }).setLngLat(newGreenMarkerCoordinatesArray).addTo(map).setPopup(new tt.Popup().setHTML(`Latitude: ${newGreenMarkerCoordinates.latitude}<br>Longitude: ${newGreenMarkerCoordinates.longitude}`));\n    }\n    locations.forEach((location, index) => {\n      if (map && location.latitude && location.longitude) {\n        const coordinates = [parseFloat(location.longitude), parseFloat(location.latitude)];\n        new tt.Marker({\n          color: '#0000FF'\n        }).setLngLat(coordinates).addTo(map).setPopup(new tt.Popup().setHTML(`Base Station ${index + 1}<br>Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\n        const lineSourceData = map.getSource('lineSource')._data;\n        lineSourceData.geometry.coordinates = [[parseFloat(newGreenMarkerCoordinates.longitude), parseFloat(newGreenMarkerCoordinates.latitude)], [parseFloat(location.longitude), parseFloat(location.latitude)]];\n        map.getSource('lineSource').setData(lineSourceData);\n        map.setLayoutProperty('lineLayer', 'visibility', 'visible');\n      }\n    });\n  };\n  const addUserMarkers = () => {\n    if (map && userLocation.latitude && userLocation.longitude) {\n      const newYellowMarkerCoordinatesArray = [parseFloat(userLocation.longitude), parseFloat(userLocation.latitude)];\n      new tt.Marker({\n        color: '#FFFF00'\n      }).setLngLat(newYellowMarkerCoordinatesArray).addTo(map).setPopup(new tt.Popup().setHTML(`User Location <br>Latitude: ${userLocation.latitude}<br>Longitude: ${userLocation.longitude}`));\n    }\n  };\n  useEffect(() => {\n    addUserMarkers();\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\n  const handleSendRequest = async () => {\n    try {\n      const response = await fetch('/api/users/all-details', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch user details');\n      }\n      const userData = await response.json();\n      if (userData.subscriptions.length > 0) {\n        const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\n        if (subscription) {\n          const SubscriptionDelay = subscription.delay;\n          const Subscriptionusername = subscription.username;\n          const Subscriptionpwd = subscription.passsword;\n          const data = {\n            action: \"sendRequest\",\n            username: Subscriptionusername,\n            password: Subscriptionpwd,\n            mountPoint: basemountpoint,\n            delay: SubscriptionDelay\n          };\n          console.log(\"exiting handlesenreq\");\n          sendJsonMessage(data);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching user details:', error.message);\n    }\n  };\n  const updateMap = () => {\n    if (map && lat && lng) {\n      map.setCenter([parseFloat(lng), parseFloat(lat)]);\n      map.setZoom(MAX_ZOOM);\n      addMarker();\n    }\n  };\n  const addMarker = () => {\n    if (map && lat && lng) {\n      const targetCoordinates = [parseFloat(lng), parseFloat(lat)];\n      const existingMarker = map.getLayer('roverMarker');\n      if (existingMarker) {\n        existingMarker.setLngLat(targetCoordinates);\n      } else {\n        const marker = new tt.Marker({\n          color: '#FF0000'\n        }).setLngLat(targetCoordinates).addTo(map).setPopup(new tt.Popup().setHTML(\"Real Time Rover Location\"));\n        marker._element.id = 'roverMarker';\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mapviewcontainer\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: mapElement,\n              className: \"mapDiv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MapView, \"GGoTTo1ciqL09ZJGDJ8hdV1HHpY=\", false, function () {\n  return [useParams, useWebSocket];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","useWebSocket","ReadyState","tt","Container","Col","Row","jsxDEV","_jsxDEV","Fragment","_Fragment","WS_URL","MAX_ZOOM","MapView","_s","basemountpoint","subid","mapElement","map","setMap","GPST","setGPST","lat","setLat","lng","setLng","height","setHeight","Q","setQ","ns","setNs","sdn","setSdn","sde","setSde","sdu","setSdu","sdne","setSdne","sdeu","setSdeu","sdun","setSdun","age","setAge","ratio","setRatio","timestamp","setTimestamp","connectionStatus","setConnectionStatus","receivedData","setReceivedData","newGreenMarkerCoordinates","setNewGreenMarkerCoordinates","latitude","longitude","newYellowMarkerCoordinates","setNewYellowMarkerCoordinates","lineLayerRef","nearbyLocations","setNearbyLocations","userLocation","setUserLocation","mapView","sendJsonMessage","lastJsonMessage","readyState","share","shouldReconnect","console","log","JSON","stringify","data","updateMap","key","container","current","center","zoom","language","addControl","FullscreenControl","NavigationControl","addSource","type","properties","geometry","coordinates","addLayer","id","source","layout","paint","getLayer","remove","connectionStatusMessages","CONNECTING","OPEN","CLOSING","CLOSED","newData","q","mountpoint","handleConnect","action","handleStopStreaming","handleClose","responseUserDetails","fetch","method","headers","ok","Error","userData","json","subscription","subscriptions","find","sub","responseUpdateData","_id","body","responseData","message","error","then","response","addBaseStationMarkers","catch","locations","newGreenMarkerCoordinatesArray","parseFloat","Marker","color","setLngLat","addTo","setPopup","Popup","setHTML","forEach","location","index","lineSourceData","getSource","_data","setData","setLayoutProperty","addUserMarkers","newYellowMarkerCoordinatesArray","handleSendRequest","length","SubscriptionDelay","delay","Subscriptionusername","username","Subscriptionpwd","passsword","password","mountPoint","setCenter","setZoom","addMarker","targetCoordinates","existingMarker","marker","_element","children","className","xs","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gowrisubha K/Downloads/caster-admin/client/src/components/BasestationMap/Mapview.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport * as tt from \"@tomtom-international/web-sdk-maps\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\r\nimport \"./Map.css\";\r\n\r\nconst WS_URL = \"ws://127.0.0.1:8080\";\r\nconst MAX_ZOOM = 15;\r\n\r\nconst MapView = () => {\r\n  const { basemountpoint, subid } = useParams();\r\n  const mapElement = useRef();\r\n  const [map, setMap] = useState({});\r\n  const [GPST, setGPST] = useState(null);\r\n  const [lat, setLat] = useState(null);\r\n  const [lng, setLng] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [Q, setQ] = useState(null);\r\n  const [ns, setNs] = useState(null);\r\n  const [sdn, setSdn] = useState(null);\r\n  const [sde, setSde] = useState(null);\r\n  const [sdu, setSdu] = useState(null);\r\n  const [sdne, setSdne] = useState(null);\r\n  const [sdeu, setSdeu] = useState(null);\r\n  const [sdun, setSdun] = useState(null);\r\n  const [age, setAge] = useState(null);\r\n  const [ratio, setRatio] = useState(null);\r\n  const [timestamp, setTimestamp] = useState(null);\r\n  const [connectionStatus, setConnectionStatus] = useState(\"Disconnected\");\r\n  const [receivedData, setReceivedData] = useState([]);\r\n  const [newGreenMarkerCoordinates, setNewGreenMarkerCoordinates] = useState({ latitude: 0, longitude: 0 });\r\n  const [newYellowMarkerCoordinates, setNewYellowMarkerCoordinates] = useState({ latitude: 0, longitude: 0 });\r\n  const lineLayerRef = useRef(null);\r\n  const [nearbyLocations, setNearbyLocations] = useState([]);\r\n  const [userLocation, setUserLocation] = useState({ latitude: 37.423566272, longitude: -122.094105874 });\r\n\r\n  const mapView = useRef(null);\r\n\r\n  const { sendJsonMessage, lastJsonMessage, readyState } = useWebSocket(\r\n    WS_URL,\r\n    {\r\n      share: false,\r\n      shouldReconnect: () => true,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (lastJsonMessage) {\r\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\r\n      const { latitude, longitude } = lastJsonMessage.data;\r\n      setLat(latitude);\r\n      setLng(longitude);\r\n      updateMap();\r\n    }\r\n  }, [lastJsonMessage]);\r\n\r\n  useEffect(() => {\r\n    let map = tt.map({\r\n      key: \"lA2ONWjNjuFjGxJC4oAlV2IQJrgTpAXi\",\r\n      container: mapElement.current,\r\n      center: [0, 0],\r\n      zoom: 10,\r\n      language: \"en-GB\",\r\n    });\r\n\r\n    map.addControl(new tt.FullscreenControl());\r\n    map.addControl(new tt.NavigationControl());\r\n    setMap(map);\r\n\r\n    map.addSource('lineSource', {\r\n      type: 'geojson',\r\n      data: {\r\n        type: 'Feature',\r\n        properties: {},\r\n        geometry: {\r\n          type: 'LineString',\r\n          coordinates: [],\r\n        },\r\n      },\r\n    });\r\n\r\n    map.addLayer({\r\n      id: 'lineLayer',\r\n      type: 'line',\r\n      source: 'lineSource',\r\n      layout: {\r\n        'line-join': 'round',\r\n        'line-cap': 'round',\r\n      },\r\n      paint: {\r\n        'line-color': '#0000FF',\r\n        'line-width': 2,\r\n      },\r\n    });\r\n\r\n    lineLayerRef.current = map.getLayer('lineLayer');\r\n\r\n    return () => map.remove();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const connectionStatusMessages = {\r\n      [ReadyState.CONNECTING]: \"Connecting to Caster...\",\r\n      [ReadyState.OPEN]: \"OPEN\",\r\n      [ReadyState.CLOSING]: \"Disconnecting...\",\r\n      [ReadyState.CLOSED]: \"Disconnected\",\r\n    };\r\n\r\n    setConnectionStatus(connectionStatusMessages[readyState]);\r\n  }, [readyState]);\r\n\r\n  useEffect(() => {\r\n    if (lastJsonMessage) {\r\n      console.log(`Got a new message: ${JSON.stringify(lastJsonMessage.data)}`);\r\n      const { GPST, latitude, longitude, height, Q, ns, sdn, sde, sdu, sdne, sdeu, sdun, age, ratio, timestamp } = lastJsonMessage.data;\r\n\r\n      const newData = [...receivedData, { latitude, longitude, height, q: Q, ns, sdn, sde, sdu, sdne, sdeu, sdun, age, ratio, timestamp, mountpoint: GPST }];\r\n      console.log(newData);\r\n\r\n      setReceivedData(newData);\r\n      setGPST(GPST);\r\n      setLat(latitude);\r\n      setLng(longitude);\r\n      setHeight(height);\r\n      setQ(Q);\r\n      setNs(ns);\r\n      setSdn(sdn);\r\n      setSde(sde);\r\n      setSdu(sdu);\r\n      setSdne(sdne);\r\n      setSdeu(sdeu);\r\n      setSdun(sdun);\r\n      setAge(age);\r\n      setRatio(ratio);\r\n      setTimestamp(timestamp);\r\n      updateMap();\r\n    }\r\n  }, [lastJsonMessage]);\r\n\r\n  const handleConnect = () => {\r\n    sendJsonMessage({ action: \"connectToCaster\" });\r\n    setConnectionStatus(\"Connected to Caster\");\r\n  };\r\n\r\n  const handleStopStreaming = () => {\r\n    sendJsonMessage({ action: \"stopStreaming\" });\r\n    setConnectionStatus(\"Streaming of data stopped...\");\r\n  };\r\n\r\n  const handleClose = async () => {\r\n    console.log(\"receivedData\");\r\n    sendJsonMessage({ action: \"closeConnection\" });\r\n    setConnectionStatus(\"Disconnected\");\r\n\r\n    try {\r\n      const responseUserDetails = await fetch('/api/users/all-details', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!responseUserDetails.ok) {\r\n        throw new Error('Failed to fetch user details');\r\n      }\r\n\r\n      const userData = await responseUserDetails.json();\r\n\r\n      const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\r\n\r\n      if (subscription) {\r\n        const responseUpdateData = await fetch(`/api/users/update-base-station-data/${userData._id}/${subscription._id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ receivedData }),\r\n        });\r\n\r\n        if (!responseUpdateData.ok) {\r\n          throw new Error('Failed to update base station data');\r\n        }\r\n\r\n        const responseData = await responseUpdateData.json();\r\n        console.log(responseData.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling close:', error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Nearbybasestation.json\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setNearbyLocations(data);\r\n        addBaseStationMarkers(data);\r\n        updateMap();\r\n      })\r\n      .catch(error => console.error(\"Error fetching JSON data:\", error));\r\n\r\n  }, []);\r\n\r\n  const addBaseStationMarkers = (locations) => {\r\n    if (map && newGreenMarkerCoordinates.latitude && newGreenMarkerCoordinates.longitude) {\r\n      const newGreenMarkerCoordinatesArray = [\r\n        parseFloat(newGreenMarkerCoordinates.longitude),\r\n        parseFloat(newGreenMarkerCoordinates.latitude),\r\n      ];\r\n\r\n      new tt.Marker({\r\n        color: '#00FF00',\r\n      })\r\n        .setLngLat(newGreenMarkerCoordinatesArray)\r\n        .addTo(map)\r\n        .setPopup(new tt.Popup().setHTML(`Latitude: ${newGreenMarkerCoordinates.latitude}<br>Longitude: ${newGreenMarkerCoordinates.longitude}`));\r\n    }\r\n\r\n    locations.forEach((location, index) => {\r\n      if (map && location.latitude && location.longitude) {\r\n        const coordinates = [\r\n          parseFloat(location.longitude),\r\n          parseFloat(location.latitude),\r\n        ];\r\n\r\n        new tt.Marker({\r\n          color: '#0000FF',\r\n        })\r\n          .setLngLat(coordinates)\r\n          .addTo(map)\r\n          .setPopup(new tt.Popup().setHTML(`Base Station ${index + 1}<br>Latitude: ${location.latitude}<br>Longitude: ${location.longitude}`));\r\n\r\n        const lineSourceData = map.getSource('lineSource')._data;\r\n        lineSourceData.geometry.coordinates = [\r\n          [parseFloat(newGreenMarkerCoordinates.longitude), parseFloat(newGreenMarkerCoordinates.latitude)],\r\n          [parseFloat(location.longitude), parseFloat(location.latitude)],\r\n        ];\r\n\r\n        map.getSource('lineSource').setData(lineSourceData);\r\n        map.setLayoutProperty('lineLayer', 'visibility', 'visible');\r\n      }\r\n    });\r\n  };\r\n\r\n  const addUserMarkers = () => {\r\n    if (map && userLocation.latitude && userLocation.longitude) {\r\n      const newYellowMarkerCoordinatesArray = [\r\n        parseFloat(userLocation.longitude),\r\n        parseFloat(userLocation.latitude),\r\n      ];\r\n\r\n      new tt.Marker({\r\n        color: '#FFFF00'\r\n      })\r\n        .setLngLat(newYellowMarkerCoordinatesArray)\r\n        .addTo(map)\r\n        .setPopup(new tt.Popup().setHTML(`User Location <br>Latitude: ${userLocation.latitude}<br>Longitude: ${userLocation.longitude}`));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    addUserMarkers();\r\n  }, [newGreenMarkerCoordinates, nearbyLocations]);\r\n\r\n  const handleSendRequest = async () => {\r\n    try {\r\n      const response = await fetch('/api/users/all-details', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user details');\r\n      }\r\n\r\n      const userData = await response.json();\r\n      if (userData.subscriptions.length > 0) {\r\n        const subscription = userData.subscriptions.find(sub => sub.basemountpoint === basemountpoint);\r\n\r\n        if (subscription) {\r\n          const SubscriptionDelay = subscription.delay;\r\n          const Subscriptionusername = subscription.username;\r\n          const Subscriptionpwd = subscription.passsword;\r\n\r\n          const data = {\r\n            action: \"sendRequest\",\r\n            username: Subscriptionusername,\r\n            password: Subscriptionpwd,\r\n            mountPoint: basemountpoint,\r\n            delay: SubscriptionDelay\r\n          };\r\n          console.log(\"exiting handlesenreq\");\r\n          sendJsonMessage(data);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user details:', error.message);\r\n    }\r\n  };\r\n\r\n  const updateMap = () => {\r\n    if (map && lat && lng) {\r\n      map.setCenter([parseFloat(lng), parseFloat(lat)]);\r\n      map.setZoom(MAX_ZOOM);\r\n      addMarker();\r\n    }\r\n  };\r\n\r\n  const addMarker = () => {\r\n    if (map && lat && lng) {\r\n      const targetCoordinates = [parseFloat(lng), parseFloat(lat)];\r\n\r\n      const existingMarker = map.getLayer('roverMarker');\r\n\r\n      if (existingMarker) {\r\n        existingMarker.setLngLat(targetCoordinates);\r\n      } else {\r\n        const marker = new tt.Marker({\r\n          color: '#FF0000'\r\n        })\r\n          .setLngLat(targetCoordinates)\r\n          .addTo(map)\r\n          .setPopup(new tt.Popup().setHTML(\"Real Time Rover Location\"));\r\n\r\n        marker._element.id = 'roverMarker';\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <center>\r\n        <Container className=\"mapviewcontainer\">\r\n          <Row>\r\n            <Col xs=\"12\">\r\n              <div ref={mapElement} className=\"mapDiv\" />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </center>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}